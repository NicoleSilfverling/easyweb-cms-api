@{
    Layout = null;
    var planets = Model;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="./css/planets.css">
    <title>Planets</title>
</head>

<body>
    <div id="introVideoContainer">
        <video id="introVideo" autoplay muted playsinline>
            <source src="/videos/intro.mp4" type="video/mp4">
        </video>
    </div>

    <div class="layout">
        <div>
            <h1>Click a planet to get more details</h1>

            <!-- Display a list of planets -->
            <ul id="planetList">
                @foreach (var planet in planets)
                {
                    <li>
                        <h4>@planet.Name</h4>
                        <button class="planetButton" data-planet="@planet.WikiName" data-size="@planet.SizeFactor"
                            data-color="@planet.Color">
                        </button>
                    </li>
                }
            </ul>
        </div>

        <div class="solar-system">
            <div class="sun"></div>
            @for (int i = 0; i < planets.Count; i++)
            {
                var planet = planets[i];
                var orbitSize = 50 + i * 30;
                <div class="orbit" data-orbit="@orbitSize">
                    <div class="planet-container" data-size="@planet.SizeFactor" data-color="@planet.Color" data-index="@i">
                        <div class="planet-wrapper">
                            <div class="planet">
                                @if (planet.HasRings)
                                {
                                    <div class="rings"></div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Popup -->
    <div id="planetInfoPopup" class="popup hidden">
        <h2 id="planetTitle"></h2>
        <strong>
            <p id="planetDescription"></p>
        </strong>
        <img id="planetImage" src="" alt="Planet Thumbnail" />
        <p id="planetExtract"></p>
        <button onclick="closePopup()">Close</button>
    </div>

    <script>
        // Intro
        const introVideo = document.getElementById('introVideo');
        const introContainer = document.getElementById('introVideoContainer');
        introVideo.addEventListener('ended', () => {
            introContainer.classList.add('hidden');
        });

        // Planet buttons
        document.querySelectorAll('.planetButton').forEach(button => {
            button.addEventListener('click', () => {
                const planetName = button.getAttribute('data-planet');
                fetchPlanetData(planetName);
            });

            const size = parseFloat(button.dataset.size);
            const color = button.dataset.color;
            button.style.setProperty('--planet-size', `${size}px`);
            button.style.setProperty('--planet-color', color);
        });

        // Solar system planet rendering
        document.querySelectorAll('.orbit').forEach(orbit => {
            const orbitSize = parseFloat(orbit.dataset.orbit);
            orbit.style.setProperty('--orbit-size', `${orbitSize}px`);
        });

        document.querySelectorAll('.planet-container').forEach(container => {
            const planet = container.querySelector('.planet');
            const size = parseFloat(container.dataset.size);
            const color = container.dataset.color;
            const angle = Math.floor(Math.random() * 360);

            planet.style.setProperty('--planet-size', `${size / 2.5}px`);
            planet.style.setProperty('--planet-color', color);

            // Set initial angle offset on container (this rotates the whole orbit's start angle)
            container.style.transform = `rotate(${angle}deg)`;
        });

        // Fetch & display data
        async function fetchPlanetData(planet) {
            try {
                const response = await fetch(`/data/${planet}`);
                const data = await response.json();
                showPlanetInfo(data);
            } catch (error) {
                console.error("Error fetching planet data:", error);
            }
        }

        function showPlanetInfo(data) {
            document.getElementById('planetTitle').textContent = data.title;
            document.getElementById('planetDescription').textContent = data.description;
            document.getElementById('planetExtract').textContent = data.extract;

            if (data.thumbnail?.source) {
                document.getElementById('planetImage').src = data.thumbnail.source;
            }

            document.getElementById("planetInfoPopup").classList.remove("hidden");
        }

        function closePopup() {
            document.getElementById("planetInfoPopup").classList.add("hidden");
        }
    </script>
</body>

</html>
